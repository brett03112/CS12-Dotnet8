namespace Packt.Shared;

// This file is automatically generated. Any changes will be overwritten. Works with public partial class Person in Person.cs
public partial class Person
{
    #region Properties: Methods to get and/or set data or state

    // A readonly property defined using C# 1 to 5 syntax
    public string Origin
    {
        get
        {
            return string.Format("{0} was born on {1}.",
                arg0: Name, arg1: HomePlanet);
        }
    }

    // Two readonly properties defined using C# 6 or later Lambda expression body syntax 

    public string Greeting => $"{Name} says 'Hello!'";
    public int Age => DateTime.Today.Year - Born.Year;

    // A read-write property defined using C# 3 auto-syntax
    public string? FavoriteIceCream { get; set; }

    // A private backing field to store the property value
    private string? _favoritePrimaryColor;

    public string? FavoritePrimaryColor
    {
        get
        {
            return _favoritePrimaryColor;
        }
        set
        {
            switch (value?.ToLower())
            {
                case "red":
                case "blue":
                case "green":
                    _favoritePrimaryColor = value;
                    break;
                default:
                    throw new ArgumentException($"{value} is not a primary color. " + "Choose from: red, green, blue.");
            }
        }
    }
    private WondersOfTheAncientWorld _favoriteAncientWonder;

    public WondersOfTheAncientWorld FavoriteAncientWonder
    {
        get { return _favoriteAncientWonder; }
        set
        {
            string wonderName = value.ToString();

            if(wonderName.Contains(','))
            {
                throw new ArgumentException(
                    message:  "Favorite ancient wonder can only have a single enum value.",
                    paramName:  nameof(FavoriteAncientWonder));            
            }
            if (!Enum.IsDefined(typeof(WondersOfTheAncientWorld), value))
            {
                throw new ArgumentException($"{value} is not a member of the WondersOfTheAncientWorld enum.",
                paramName:  nameof(FavoriteAncientWonder));
            }
            _favoriteAncientWonder = value;

            /*
            We could simplify the validation by only checking if the value is defined in the
            original enum because IsDefined returns false for multiple values and undefined
            values. However, I want to show a different exception for multiple values, so I will
            use the fact that multiple values formatted as a string would include a comma in
            the list of names. This also means we must check for multiple values before we
            check if the value is defined. A comma-separated list is how multiple enum values
            are represented as a string, but you cannot use commas to set multiple enum
            values. You should use | (the bitwise OR) to set multiple enum values.
            */
        }
    }
    /*
        Good Practice: This isn’t the best way to calculate someone’s age, but we aren’t
        learning how to calculate an age from a date and time of birth. If you need to do that
        properly, then read the discussion at the following link: https://stackoverflow.
        com/questions/9/how-do-i-calculate-someones-age-in-c
    */  
    #endregion

    #region Indexers:  Properties that use array syntax to access them

    public Person this[int index]
    {
        get
        {
            return Children[index]; // Pas on to the List<T> indexer
        }
        set
        {
            Children[index] = value;
        }
    }

    // A read-only string number
    public Person  this[string name]
    {
        get
        {
            return Children.Find(p => p.Name == name)!;
        }
    }

    #endregion
}